@using Markdig
@using System.Reflection

@RenderedHtml

@code {
    [Parameter]
    public string? Filename { get; set; }

    private static readonly Regex AnchorPattern = new Regex(@"<a href=""([^""]*)""(.*?)>([^<]*)</a>", RegexOptions.Compiled);

    public string Html { get; private set; } = string.Empty;
    public MarkupString RenderedHtml { get => (MarkupString)Html; }

    protected override void OnInitialized() {
        var assembly = Assembly.GetExecutingAssembly();
        // foreach (var (key, value) in assembly.GetManifestResourceNames().Select(x => (x, x.Replace($"{assembly.GetName().Name}.", "")))) Console.WriteLine($"{key} => {value}");
        var resourceName = $"{assembly.GetName().Name}.{Filename!.Replace('/', '.')}";
        using var stream = assembly.GetManifestResourceStream(resourceName);
        if (stream is null) {
            Html = $"<span>The resource {resourceName} does not exist.</span>";
            return;
        }
        using var reader = new StreamReader(stream);
        Html = AnchorPattern.Replace(Markdown.ToHtml(reader.ReadToEnd()), "<a href=\"https://github.com/pdf114514/FortniteLobbybot/tree/main/$1\"target=\"_blank\"$2>$3</a>");
    }
}